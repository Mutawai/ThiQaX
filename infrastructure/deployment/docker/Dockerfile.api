# Dockerfile.api
# Multi-stage build for optimized production image

# Build stage
FROM node:20-alpine AS builder

# Set working directory
WORKDIR /app

# Copy package files and install dependencies
COPY package*.json ./
RUN npm ci

# Copy application code
COPY . .

# Run linting and tests
RUN npm run lint
RUN npm run test:unit

# Build the application
RUN npm run build

# Remove development dependencies
RUN npm prune --production

# Production stage
FROM node:20-alpine

# Set environment variables
ENV NODE_ENV=production
ENV PORT=5000

# Create non-root user
RUN addgroup -g 1001 -S nodejs && \
    adduser -S thiqax -u 1001 -G nodejs

# Set working directory
WORKDIR /app

# Install system dependencies
RUN apk --no-cache add curl

# Copy built application from builder stage
COPY --from=builder --chown=thiqax:nodejs /app/node_modules ./node_modules
COPY --from=builder --chown=thiqax:nodejs /app/dist ./dist
COPY --from=builder --chown=thiqax:nodejs /app/package*.json ./
COPY --from=builder --chown=thiqax:nodejs /app/ecosystem.config.js ./
COPY --from=builder --chown=thiqax:nodejs /app/scripts ./scripts

# Create necessary directories with proper permissions
RUN mkdir -p logs uploads security-reports && \
    chown -R thiqax:nodejs logs uploads security-reports

# Ensure scripts are executable
RUN chmod +x scripts/security/vulnerability-scan.sh scripts/ci/*.sh

# Switch to non-root user
USER thiqax

# Expose application port
EXPOSE 5000

# Set health check
HEALTHCHECK --interval=30s --timeout=10s --start-period=40s --retries=3 \
  CMD curl -f http://localhost:5000/api/v1/health || exit 1

# Use PM2 to run the application
RUN npm install -g pm2
CMD ["pm2-runtime", "ecosystem.config.js"]
