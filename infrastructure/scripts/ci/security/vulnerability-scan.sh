#!/bin/bash
#
# ThiQaX Platform Vulnerability Scanner
# Performs comprehensive security scans on the application
# and generates a security report
#
# Usage: ./vulnerability-scan.sh [--environment dev|staging|prod] [--report-path /path/to/report]

set -e

# Default values
ENVIRONMENT="dev"
REPORT_PATH="./security-reports"
CURRENT_DATE=$(date +"%Y-%m-%d")
SEVERITY_THRESHOLD="moderate" # none, low, moderate, high, critical

# Parse command line arguments
while [[ "$#" -gt 0 ]]; do
  case $1 in
    --environment) ENVIRONMENT="$2"; shift ;;
    --report-path) REPORT_PATH="$2"; shift ;;
    --severity) SEVERITY_THRESHOLD="$2"; shift ;;
    *) echo "Unknown parameter: $1"; exit 1 ;;
  esac
  shift
done

# Create report directory if it doesn't exist
mkdir -p "$REPORT_PATH"
REPORT_FILE="$REPORT_PATH/vulnerability-scan-$ENVIRONMENT-$CURRENT_DATE.json"
SUMMARY_FILE="$REPORT_PATH/vulnerability-scan-$ENVIRONMENT-$CURRENT_DATE-summary.txt"

echo "Starting ThiQaX vulnerability scan for $ENVIRONMENT environment"
echo "Results will be saved to $REPORT_FILE"
echo "----------------------------------------"

# Function to log messages with timestamps
log_message() {
  echo "[$(date +"%Y-%m-%d %H:%M:%S")] $1"
}

# Function to check if a command exists
command_exists() {
  command -v "$1" >/dev/null 2>&1
}

# Initialize report JSON structure
echo "{" > "$REPORT_FILE"
echo "  \"scan_date\": \"$CURRENT_DATE\"," >> "$REPORT_FILE"
echo "  \"environment\": \"$ENVIRONMENT\"," >> "$REPORT_FILE"
echo "  \"results\": {" >> "$REPORT_FILE"

# Initialize summary file
echo "ThiQaX Security Scan Summary - $ENVIRONMENT ($CURRENT_DATE)" > "$SUMMARY_FILE"
echo "=========================================================" >> "$SUMMARY_FILE"
echo "" >> "$SUMMARY_FILE"

# Track if any high severity issues were found
HIGH_SEVERITY_FOUND=false

# NPM audit scan
log_message "Running NPM security audit..."
if command_exists npm; then
  npm audit --json --production > npm-audit.json
  
  # Extract critical and high vulnerabilities for summary
  CRITICAL_COUNT=$(grep -o '"critical":[0-9]*' npm-audit.json | cut -d':' -f2)
  HIGH_COUNT=$(grep -o '"high":[0-9]*' npm-audit.json | cut -d':' -f2)
  
  # Check if we found any high/critical vulnerabilities
  if [ "$CRITICAL_COUNT" -gt 0 ] || [ "$HIGH_COUNT" -gt 0 ]; then
    HIGH_SEVERITY_FOUND=true
  fi
  
  echo "  \"npm_audit\": $(cat npm-audit.json)," >> "$REPORT_FILE"
  echo "NPM Audit Results:" >> "$SUMMARY_FILE"
  echo "- Critical: $CRITICAL_COUNT" >> "$SUMMARY_FILE"
  echo "- High: $HIGH_COUNT" >> "$SUMMARY_FILE"
  echo "" >> "$SUMMARY_FILE"
  
  rm npm-audit.json
else
  log_message "NPM not found, skipping NPM audit"
  echo "  \"npm_audit\": { \"error\": \"npm command not found\" }," >> "$REPORT_FILE"
fi

# OWASP Dependency-Check (if installed)
log_message "Running OWASP Dependency-Check..."
if command_exists dependency-check.sh; then
  dependency-check.sh --project "ThiQaX-$ENVIRONMENT" --out "$REPORT_PATH/dependency-check" --format JSON
  
  # Add to main report
  echo "  \"dependency_check\": $(cat "$REPORT_PATH/dependency-check/dependency-check-report.json")," >> "$REPORT_FILE"
  
  # Extract high severity findings for summary
  HIGH_VULNS=$(grep -o '"severity":"HIGH"' "$REPORT_PATH/dependency-check/dependency-check-report.json" | wc -l)
  
  if [ "$HIGH_VULNS" -gt 0 ]; then
    HIGH_SEVERITY_FOUND=true
  fi
  
  echo "OWASP Dependency-Check Results:" >> "$SUMMARY_FILE"
  echo "- High severity vulnerabilities: $HIGH_VULNS" >> "$SUMMARY_FILE"
  echo "" >> "$SUMMARY_FILE"
else
  log_message "OWASP Dependency-Check not found, skipping"
  echo "  \"dependency_check\": { \"error\": \"dependency-check.sh command not found\" }," >> "$REPORT_FILE"
fi

# ESLint security plugin scan
log_message "Running ESLint security scan..."
if command_exists npx; then
  npx eslint --plugin security --ext .js src/ -f json > eslint-security.json
  echo "  \"eslint_security\": $(cat eslint-security.json)," >> "$REPORT_FILE"
  
  # Extract warning and error counts for summary
  ERROR_COUNT=$(grep -o '"errorCount":[0-9]*,' eslint-security.json | head -1 | cut -d':' -f2 | cut -d',' -f1)
  WARNING_COUNT=$(grep -o '"warningCount":[0-9]*,' eslint-security.json | head -1 | cut -d':' -f2 | cut -d',' -f1)
  
  if [ "$ERROR_COUNT" -gt 0 ]; then
    HIGH_SEVERITY_FOUND=true
  fi
  
  echo "ESLint Security Plugin Results:" >> "$SUMMARY_FILE"
  echo "- Errors: $ERROR_COUNT" >> "$SUMMARY_FILE"
  echo "- Warnings: $WARNING_COUNT" >> "$SUMMARY_FILE"
  echo "" >> "$SUMMARY_FILE"
  
  rm eslint-security.json
else
  log_message "NPX not found, skipping ESLint security scan"
  echo "  \"eslint_security\": { \"error\": \"npx command not found\" }," >> "$REPORT_FILE"
fi

# JWT configuration check
log_message "Checking JWT configuration..."
# This is a simplified check - in a real system, you'd have more robust verification
if grep -q "JWT_SECRET=use_a_strong_random_secret_key_here" .env.$ENVIRONMENT; then
  echo "  \"jwt_config_check\": { \"status\": \"fail\", \"message\": \"Default JWT secret detected in .env.$ENVIRONMENT\" }," >> "$REPORT_FILE"
  HIGH_SEVERITY_FOUND=true
  echo "JWT Configuration Check: FAILED (Default secret detected)" >> "$SUMMARY_FILE"
else
  echo "  \"jwt_config_check\": { \"status\": \"pass\", \"message\": \"JWT configuration appears secure\" }," >> "$REPORT_FILE"
  echo "JWT Configuration Check: PASSED" >> "$SUMMARY_FILE"
fi
echo "" >> "$SUMMARY_FILE"

# MongoDB configuration check
log_message "Checking MongoDB configuration..."
if grep -q "MONGODB_URI=mongodb://localhost:27017/thiqax" .env.$ENVIRONMENT && [ "$ENVIRONMENT" != "dev" ]; then
  echo "  \"mongodb_check\": { \"status\": \"fail\", \"message\": \"Development MongoDB URI detected in non-dev environment\" }," >> "$REPORT_FILE"
  HIGH_SEVERITY_FOUND=true
  echo "MongoDB Configuration Check: FAILED (Using development URI in $ENVIRONMENT)" >> "$SUMMARY_FILE"
else
  echo "  \"mongodb_check\": { \"status\": \"pass\", \"message\": \"MongoDB configuration appears appropriate for $ENVIRONMENT\" }," >> "$REPORT_FILE"
  echo "MongoDB Configuration Check: PASSED" >> "$SUMMARY_FILE"
fi
echo "" >> "$SUMMARY_FILE"

# Check SSL configuration in nginx for production/staging
log_message "Checking SSL configuration..."
if [ "$ENVIRONMENT" != "dev" ]; then
  if grep -q "ssl_protocols TLSv1.2 TLSv1.3;" nginx/nginx.$ENVIRONMENT.conf; then
    echo "  \"ssl_check\": { \"status\": \"pass\", \"message\": \"SSL configuration using TLS 1.2/1.3 only\" }," >> "$REPORT_FILE"
    echo "SSL Configuration Check: PASSED (TLS 1.2/1.3 only)" >> "$SUMMARY_FILE"
  else
    echo "  \"ssl_check\": { \"status\": \"fail\", \"message\": \"SSL configuration may allow insecure protocols\" }," >> "$REPORT_FILE"
    HIGH_SEVERITY_FOUND=true
    echo "SSL Configuration Check: FAILED (May allow insecure protocols)" >> "$SUMMARY_FILE"
  fi
  echo "" >> "$SUMMARY_FILE"
fi

# Check for security headers in nginx
log_message "Checking security headers..."
HEADERS_MISSING=0
for header in "X-Content-Type-Options" "X-Frame-Options" "X-XSS-Protection" "Content-Security-Policy" "Strict-Transport-Security"; do
  if ! grep -q "$header" nginx/nginx.$ENVIRONMENT.conf; then
    HEADERS_MISSING=$((HEADERS_MISSING+1))
  fi
done

if [ $HEADERS_MISSING -eq 0 ]; then
  echo "  \"security_headers\": { \"status\": \"pass\", \"message\": \"All recommended security headers present\" }" >> "$REPORT_FILE"
  echo "Security Headers Check: PASSED (All recommended headers present)" >> "$SUMMARY_FILE"
else
  echo "  \"security_headers\": { \"status\": \"fail\", \"message\": \"$HEADERS_MISSING security headers missing\" }" >> "$REPORT_FILE"
  if [ $HEADERS_MISSING -gt 2 ]; then
    HIGH_SEVERITY_FOUND=true
  fi
  echo "Security Headers Check: FAILED ($HEADERS_MISSING headers missing)" >> "$SUMMARY_FILE"
fi

# Close the JSON structure
echo "  }" >> "$REPORT_FILE"
echo "}" >> "$REPORT_FILE"

# Final summary
echo "" >> "$SUMMARY_FILE"
echo "Overall Security Assessment:" >> "$SUMMARY_FILE"
if [ "$HIGH_SEVERITY_FOUND" = true ]; then
  echo "❌ HIGH SEVERITY ISSUES DETECTED - Immediate attention required" >> "$SUMMARY_FILE"
  log_message "❌ Scan completed with HIGH SEVERITY issues"
else
  echo "✅ No high severity issues detected" >> "$SUMMARY_FILE"
  log_message "✅ Scan completed successfully"
fi

echo "" >> "$SUMMARY_FILE"
echo "For detailed results, see: $REPORT_FILE" >> "$SUMMARY_FILE"

# Display summary
cat "$SUMMARY_FILE"

# Exit with appropriate code
if [ "$HIGH_SEVERITY_FOUND" = true ]; then
  exit 1
else
  exit 0
fi
